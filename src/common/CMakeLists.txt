#===============================================================================
# Copyright 2019-2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

if(DNNLPRIM_ALL)
    file(GLOB SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/*.h
        ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/*.c
        ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
        )
    if(NECVE)
        file(GLOB SOURCES_VE
            ${CMAKE_CURRENT_SOURCE_DIR}/ve/*.h
            ${CMAKE_CURRENT_SOURCE_DIR}/ve/*.hpp
            ${CMAKE_CURRENT_SOURCE_DIR}/ve/*.c
            ${CMAKE_CURRENT_SOURCE_DIR}/ve/*.cpp
            )
        # Same-Name files in subdirectory REPLACE parent ones:
        #   some cpu-specific code / optimization is too ugly!
        string(REPLACE "/ve/" "/" x_ "${SOURCES_VE}")
        list(REMOVE_ITEM SOURCES ${x_})

        message(STATUS "SOURCES_VE      ${SOURCES_VE}")
        # add VE files to [maybe shortened] SOURCES
        list(APPEND SOURCES ${SOURCES_VE})

        set_source_files_properties(${SOURCES_VE} PROPERTIES COMPILE_FLAGS
            "-I${CMAKE_CURRENT_SOURCE_DIR}/ve -I${CMAKE_CURRENT_SOURCE_DIR}")
    endif()
else() # Debug: include primitives piecewise into libdnnl
    file(GLOB SOURCES_CORE
        ${CMAKE_CURRENT_SOURCE_DIR}/bit_cast.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/bfloat16.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/c_types_map.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/cpu_target.h
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_debug.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_debug_autogenerated.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_omp.h
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_thread.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_thread_parallel_nd.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/dnnl_traits.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/engine.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/engine.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/float16.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gemm_types.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/internal_desc_types.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/math_utils.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_desc_wrapper.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_desc_wrapper.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_storage.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_storage.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_tracking.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/memory_zero_pad.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/nstl.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_attr.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_attr.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_desc.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_desc.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_exec_types.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_exec_types.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_impl.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_iterator.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_iterator.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/query.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/scratchpad.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/scratchpad.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/stream.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/stream.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/type_helpers.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/utils.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/utils.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/verbose.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/verbose.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/z_magic.hpp
        # jit convolutions require primitive_hashing::key_t
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.hpp
        )
    if(DNNL_ENABLE_PRIMITIVE_CACHE)
        list(APPEND SOURCES_CORE 
            ${CMAKE_CURRENT_SOURCE_DIR}/primitive_cache.hpp
            ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.hpp
            )
    elseif(TARGET_X86_JIT AND (DNNLPRIM_ALL OR DNNLPRIM_CONVOLUTION))
        # jit convolutions require primitive_hashing::key_t
        list(APPEND SOURCES_CORE 
            ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.cpp
            ${CMAKE_CURRENT_SOURCE_DIR}/primitive_hashing.hpp
            )
    endif()

    unset(SOURCES_PRIMITIVES)

    # add foo* files from current directory to list 'var', if MYLAYER is enabled in options.cmake
    macro(add_primitive_sources var MYLAYER) # followed by filename prefixes
        if(DNNLPRIM_ALL OR DNNLPRIM_${MYLAYER})
            foreach(layer_ ${ARGN})
                append_glob(${var} ${CMAKE_CURRENT_SOURCE_DIR}/${layer_}*)
            endforeach()
        endif()
    endmacro()
    # primitive descriptor private data and create
    add_primitive_sources(SOURCES_PRIMITIVES BATCH_NORMALIZATION batch_normalization)
    add_primitive_sources(SOURCES_PRIMITIVES BINARY binary)
    add_primitive_sources(SOURCES_PRIMITIVES CONVOLUTION convolution reorder)
    add_primitive_sources(SOURCES_PRIMITIVES DECONVOLUTION deconvolution)
    add_primitive_sources(SOURCES_PRIMITIVES ELTWISE eltwise)
    add_primitive_sources(SOURCES_PRIMITIVES INNER_PRODUCT inner_product)
    add_primitive_sources(SOURCES_PRIMITIVES LAYER_NORMALIZATION layer_normalization)
    add_primitive_sources(SOURCES_PRIMITIVES LRN lrn)
    add_primitive_sources(SOURCES_PRIMITIVES LOGSOFTMAX logsoftmax)
    add_primitive_sources(SOURCES_PRIMITIVES MATMUL matmul)
    add_primitive_sources(SOURCES_PRIMITIVES POOLING pooling)
    add_primitive_sources(SOURCES_PRIMITIVES RESAMPLING resampling)
    add_primitive_sources(SOURCES_PRIMITIVES RNN rnn reorder)
    add_primitive_sources(SOURCES_PRIMITIVES SHUFFLE shuffle)
    add_primitive_sources(SOURCES_PRIMITIVES SOFTMAX softmax)
    # internal, or with special constructor
    add_primitive_sources(SOURCES_PRIMITIVES CONCAT concat)
    add_primitive_sources(SOURCES_PRIMITIVES REORDER reorder)
    add_primitive_sources(SOURCES_PRIMITIVES SUM sum)
    #add_primitive_sources(SOURCES_PRIMITIVES GEMM ??)
    unset(add_primitive_sources)

    unset(SOURCES)
    list(APPEND SOURCES ${SOURCES_CORE})
    list(APPEND SOURCES ${SOURCES_PRIMITIVES})
    message(STATUS "\nsources common core:\n${SOURCES_CORE}\n")
    message(STATUS "\nsources common prim:\n${SOURCES_PRIMITIVES}\n")
    message(STATUS "\nsources common     :\n${SOURCES}\n")
 
endif()

set(OBJ_LIB ${LIB_NAME}_common)
add_library(${OBJ_LIB} OBJECT ${SOURCES})
set_property(GLOBAL APPEND PROPERTY DNNL_LIB_DEPS
    $<TARGET_OBJECTS:${OBJ_LIB}>)
