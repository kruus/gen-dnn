/*******************************************************************************
* Copyright 2016-2020 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#include <assert.h>
#include <math.h>

#include "common/c_types_map.hpp"
#include "common/dnnl_thread.hpp"
#include "common/type_helpers.hpp"
#include "common/ve/memory_desc_wrapper_opt.hpp" // we use CoordsFor vectorization helper.
#include "common/dnnl_optimize.h"

#include "cpu/ref_lrn.hpp"

#include <iostream> // debug
#include <sstream> // debug

namespace dnnl {
namespace impl {
namespace cpu {

#define SQUARE(...) ((__VA_ARGS__)*(__VA_ARGS__))
//#define GATHER(PTR,BYTE_OFFSET) *(decltype(PTR))((uint8_t const*)(void*)(PTR)+(BYTE_OFFSET))

namespace {

typedef float acc_data_t;

static inline acc_data_t fast_negative_powf(acc_data_t omega, acc_data_t beta) {
    acc_data_t Y;
    /*
         * Y = omega^(-3/4) =
         * = 1.0f / sqrtf(omega) * sqrtf(1.0f / sqrtf(omega))
         * = sqrtf(1.0f / sqrtf(omega)) * 1.0f / sqrtf(omega)
         * = sqrtf(1.0f / sqrtf(omega)) / sqrtf(omega)
         * = sqrtf(1.0f / sqrtf(omega) / omega)
         * = sqrtf(1.0f / (sqrtf(omega) * omega))
         */
    if (beta == 0.75f) {
        Y = sqrtf(1.0f / (sqrtf(omega) * omega));
    } else {
        Y = 1.0f / powf(omega, beta);
    }
    return Y;
};

// Divide 'hi' up "somewhat loosely" around some target value
// (unlike vl suggestions, which MUST always partition <= MVL)
inline dim_t stack_friendly_blksz(dim_t const hi){
    dim_t constexpr stack_channels = 16384;
    dim_t ret = hi;
    if (hi > stack_channels) {
        dim_t const nFull = hi/stack_channels;
        dim_t const rem   = hi%stack_channels;
        if (rem > stack_channels/2) { // remainder "big enough"
            ret = hi / nFull;
        }else{                  // o.w. ~equal "2 2 1"
            dim_t const nLoops = nFull + (rem!=0);
            //dimt_t const nLoops = (hi+stack_channels-1) / stack_channels;
            ret = (hi+nLoops-1) / nLoops;
        }
    }
    typedef long int ld;
    printf(" partn(%ld)->blksz=%ld\n",(ld)hi,(ld)ret);
    return ret;
}
inline dim_t stack_friendly_nparts(dim_t const hi){
    dim_t constexpr stack_channels = 16384;
    dim_t ret = 1;
    if (hi > stack_channels) {
        dim_t const nFull = hi/stack_channels;
        dim_t const rem   = hi%stack_channels;
        //dimt_t const nLoops = (hi+stack_channels-1) / stack_channels;
        dim_t const nLoops = nFull + (rem!=0);
        if (rem > stack_channels/2) { // remainder "big enough"
            ret = nLoops;
        }else{                  // o.w. ~equal "2 2 1"
            dim_t blkeq = (hi+nLoops-1) / nLoops;
            ret = (hi+blkeq-1) / blkeq;
        }
    }
    typedef long int ld;
    printf(" partn(%ld)->blksz=%ld\n",(ld)hi,(ld)ret);
    return ret;
}

// ? constexpr unsigned ndims<tag> ?
#define OFFSET_ARGS memory_desc_wrapper const& md, \
    dim_t const mb, dim_t const stride_mb, \
    dim_t const c, dim_t const C, \
    dim_t const d, dim_t const D, \
    dim_t const h, dim_t const H, \
    dim_t const w, dim_t const W

/** For nc++, templated specialized templates make dead-code elimination easier
 * than the original lambda function. */
template <impl::format_tag_t tag> static inline dim_t offset(OFFSET_ARGS) {
    if (md.ndims() >= 5) return md.off(mb, c, d, h, w);
    if (md.ndims() >= 4) return md.off(mb, c, h, w);
    if (md.ndims() >= 3) return md.off(mb, c, w);
    return md.off(mb, c);
};
template<> inline dim_t offset<format_tag::nChw8c>(OFFSET_ARGS) {
    constexpr int blksize = 8;
    return mb * stride_mb + (c / blksize) * H * W * blksize
        + h * W * blksize + w * blksize + c % blksize;
};
template<> inline dim_t offset<format_tag::nChw16c>(OFFSET_ARGS) {
    constexpr int blksize = 16;
    return mb * stride_mb + (c / blksize) * H * W * blksize
        + h * W * blksize + w * blksize + c % blksize;
};
template<> inline dim_t offset<format_tag::nchw>(OFFSET_ARGS) {
    return mb * stride_mb + c * H * W + h * W + w;
};
template<> inline dim_t offset<format_tag::nhwc>(OFFSET_ARGS) {
    return mb * stride_mb + h * W * C + w * C + c;
};

} // namespace

#define CHANNEL_OFFSETS_LAMBDA 0
// -mode=P --lrn --tag=ncdhw --dir=FWD_D --alg=ACROSS,WITHIN ic202id10
// 1: 2.27 189 ms
// 0: 2.48 176 ms
#if CHANNEL_OFFSETS_LAMBDA==0
/** Calculate phy offset for channels [clo,chi) sequentially into memory
 * \c data_offf.  (i) Prepare coords for vectorized physical offset calc.
 * (ii) calc phys offset via func calls to memory_desc_wrapper_opt.
 *
 * \note Do not use if you have a formula version like nchw, nChw8c because
 * these: (i) do not need a function call; (ii) optimize well already.
 *
 * \note If use in other places, provide such a vectorized helper directly
 * from mwd_opt.
 */
static inline void channel_offsets( memory_desc_wrapper_opt const& data_opt,
        size_t * const data_off, dim_t const mb, dim_t const clo, dim_t const chi,
        dim_t const d, dim_t const h, dim_t const w) {
    assert(!data_opt.is_zero());
    typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
    auto const dm = data_opt.ndims();
    auto cf = (dm >= 5)? Coords::mk(mb,mb+1, clo,chi, d,d+1, h,h+1, w,w+1)
        : (dm >= 4)? Coords::mk(mb,mb+1, clo,chi, h,h+1, w,w+1)
        : (dm >= 3)? Coords::mk(mb,mb+1, clo,chi, w,w+1)
        : Coords::mk(mb,mb+1, clo,chi); // dm>=2 ?
    for ( ; cf; ++cf) { // channel coords in simd-length chunks
        data_opt.vec_off_v(
                cf.base(), // VecPos& vector register data
                (dim_t*)&data_off[cf.get_pos()], // outputs (seq)
                cf.get_vl(), // register len, num ouptuts
                false/*is_pos_padded*/);
    }
};
#endif

// Forward LRN formula:
// y_i = x_i * (k + a / n * Sum:j [x_j^2])^-b, where
// k, a(alpha), b(beta), n(local_size) - lrn hyperparameters;
// j - kernel points, j in [i - n/2, i + n/2] for ACROSS, 2d-shape for WITHIN;

template <impl::data_type_t d_type>
template <impl::format_tag_t tag>
void ref_lrn_fwd_t<d_type>::execute_forward(const exec_ctx_t &ctx) const {
    using namespace alg_kind;
    using namespace format_tag;
    typedef CoordsForNd<6,uint64_t,uint64_t> Coords;

    auto src = CTX_IN_MEM(const data_t *, DNNL_ARG_SRC);
    auto dst = CTX_OUT_MEM(data_t *, DNNL_ARG_DST);

    // offset calcs with builting formula vectorize well:
    //bool const formula = true;
    //bool const formula = false;
    bool const formula = (tag == nchw || tag == nhwc || tag == nChw8c || tag == nChw16c);
#ifndef MVL
#if defined(__ve)
#define MVL 256
#else
#define MVL 32
#endif
#endif
#define NOVEC PragmaQuote(_NEC novector);
#define FOR_CHAN for(dim_t i=0; i<C; ++i)

    //const memory_desc_wrapper data_d(pd()->src_md());
    //
    // If we have a formula, it vectorizes well.  If not, we pull in some vectorization
    // machinery to calculate physical offset in simd-length batches
    // I'd LIKE to have an empty data_opt wrapper if I do not need it:
    //
    //memory_desc_wrapper_opt data_opt(formula? memory_desc_t(): *pd()->src_md());
    //
    // UNFORTUNATELY, wrapper asserts that it is_block_desc() at several points..
    //
    // so just always construct the optimized one (slightly more work)
    //
    const memory_desc_wrapper_opt data_opt(pd()->src_md());
    const memory_desc_wrapper& data_d = data_opt;

    const dim_t C = pd()->C();
    const dim_t D = pd()->D();
    const dim_t H = pd()->H();
    const dim_t W = pd()->W();
    const auto stride_mb = data_d.blocking_desc().strides[0];
    const bool across_channels = pd()->desc()->alg_kind == lrn_across_channels;
    static constexpr dim_t blksize = tag == nChw16c ? 16 : 8;
    const auto ndims = data_d.ndims();

    auto compute_n_summands = [&](dim_t size) {
        if (across_channels) {
            return size;
        } else { // within_channel
            dim_t n_summands = 1;
            for (auto d = ndims - 2; d > 0; --d)
                n_summands *= size;
            return n_summands;
        }
    };

    const acc_data_t alpha = static_cast<acc_data_t>(pd()->desc()->lrn_alpha);
    const acc_data_t beta = static_cast<acc_data_t>(pd()->desc()->lrn_beta);
    const acc_data_t k = static_cast<acc_data_t>(pd()->desc()->lrn_k);
    const dim_t size = pd()->desc()->local_size;
    const dim_t half_size = (size - 1) / 2;
    const dim_t summands = compute_n_summands(size);

    // VE does not like vectorizing nstl::max or nstl::min
#define DEFINE_HALFSIZE_RANGE(var_st, var_en, i, lo, hi) \
    const dim_t var_st = ((i) - half_size + 0 <  dim_t{lo}? dim_t{lo}: (i) - half_size + 0); \
    const dim_t var_en = ((i) + half_size + 1 >= dim_t{hi}? dim_t{hi}: (i) + half_size + 1);

#if 0
    // pass by value due to icc170 and icc180 problem on KNL
    auto ker = [&](data_t * const d, dim_t const mb, dim_t const oc,
            dim_t const od, dim_t const oh, dim_t const ow) {
        acc_data_t sum = 0;
        data_t central;
#define CENTRAL_OUTSIDE 0
        // --mode=C --lrn --tag=ncdhw --dir=FWD_D --alg=ACROSS,WITHIN ic202id10 --tag=nchw ic202ih10
        // 1: 2.46 178 0.228 3.345 ms
        //    2.36 182 0.231 3.345 ms
        // 0: 2.36 165 0.229 3.950 ms
        //    2.41 163 0.231 3.93

        if (across_channels) {
#if CENTRAL_OUTSIDE
            central = src[offset<tag>(data_d, mb,stride_mb, oc,C, od,D, oh,H, ow,W)];
#endif
            // NOTE across_channels case is now separately handled at greater speed.
            //      This code is "for reference".
            DEFINE_HALFSIZE_RANGE(c_st, c_en, oc, 0, C);
            // DENSE layouts and formula-driven vectorize well
            for (dim_t c = c_st; c < c_en; ++c) {
                const acc_data_t s = src[offset<tag>(data_d, mb,stride_mb, c,C, od,D, oh,H, ow,W)];
                sum += s * s;
#if !CENTRAL_OUTSIDE
                if (c == oc) central = s;
#endif
            }
        } else if (data_d.ndims()==2) { // trivial case should use completely different approach
            // XXX test this case!
            printf(" warning: TBD data_d.ndims()==2 fwd lrn_within_channel is a trivial case\n");
            central = src[offset<tag>(data_d, mb,stride_mb, oc,C, od,D, oh,H, ow,W)];
            sum = central * central;
        } else { // generic fwd lrn_within_channel
            assert(data_d.ndims() >= 3);
            assert(data_d.ndims() <= 5);
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
#if CENTRAL_OUTSIDE
            central = src[offset<tag>(data_d, mb,stride_mb, oc,C, od,D, oh,H, ow,W)];
#endif
            if (formula) {
                // DENSE layouts and formula-driven vectorize well
                for_(dim_t d = d_st; d < d_en; ++d)
                for_(dim_t h = h_st; h < h_en; ++h)
                for (dim_t w = w_st; w < w_en; ++w) {
                    const acc_data_t s = src[offset<tag>(
                            data_d, mb,stride_mb, oc,C, d,D, h,H, w,W)];
                    sum += s * s;
#if !CENTRAL_OUTSIDE
                    if(d==od && h==oh && w==ow) central = s;
#endif
                }
            } else { // ncdhw: 1866 --> 182 ms (~ 9x faster, using vec_of_v)
                //using dnnl::impl::CoordRegs<uint64_t,6>; // match memory_desc_wrapper_opt::VecPos
                typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
                auto const dm = data_d.ndims();
                auto cf= (dm >= 5)? Coords::mk(mb,mb+1, oc,oc+1, d_st,d_en, h_st,h_en, w_st,w_en)
                : (dm >= 4)? Coords::mk(mb,mb+1, oc,oc+1, h_st,h_en, w_st,w_en)
                : Coords::mk(mb,mb+1, oc,oc+1, w_st,w_en); // dm>=3
#if CENTRAL_OUTSIDE
                central = src[offset<tag>(data_d, mb,stride_mb, oc,C, od,D, oh,H, ow,W)];
#else
#if 1
                Coords::pos_t pos_central = ((od-d_st) * (h_en-h_st) + (oh-h_st)) * (w_en-w_st) + (ow-w_st);
                //                            ^^                        ^^                         ^^
#else
                Coords::pos_t pos_central = 0;
                if (dm >= 5) central = (od-d_st);
                if (dm >= 4) central = central*(h_en-h_st) + (oh-h_st);
                if (dm >= 3) central = central*(w_en-w_st) + (ow-w_st);
#endif
#endif
                //using namespace std;
                //{ ostringstream oss; oss<<" oc,od,oh,ow="<<oc<<","<<od<<","<<oh<<","<<ow
                //    <<" central="<<pos_central<<" lims="<<cf.lim_str()<<"\n"; cout<<oss.str(); cout.flush(); }
                NOVEC for ( ; cf; ++cf) {
                    dim_t off[MVL];
                    const unsigned vl=cf.get_vl();
                    //{ ostringstream oss; oss<<" "<<cf.coord_str()<<"\n"; cout<<oss.str(); cout.flush(); }
                    data_opt.vec_off_v( cf.base(), &off[0], vl, false/*is_pos_padded*/ );
#if 1 && !CENTRAL_OUTSIDE
                    const auto pos = cf.get_pos();
                    if( pos + vl > pos_central && pos_central >= pos )
                        central = src[off[pos_central-pos]];
#endif
                    for(unsigned i=0U; i<vl; ++i) {
                        const acc_data_t s = src[off[i]];
                        sum += s * s;
#if 0 && !CENTRAL_OUTSIDE
                        //if(cf.vp[2][i]==od && cf.vp[3][i]==oh && cf.vp[4][i]==ow){
                        //    central = s;
                        //    assert( cf.get_pos()+i == pos_central );
                        //}
                        if(cf.get_pos() + i == pos_central) central = s;
#endif
                    }
                }
            }
        }
        sum = k + alpha * sum / summands;
        d[0] = static_cast<data_t>(central * fast_negative_powf(sum, beta));
    };
#endif
#if CHANNEL_OFFSETS_LAMBDA==1
    /** Prepare coords for vectorized physical offset calc.  Streamlines func calls
     * to memory_desc_wrapper, by using extended version, \c data_opt.
     * \note Do not use if you have a formula version like nchw, nChw8c because
     * these: (i) do not need a function call; (ii) optimize well already.
     *
     * XXX can a 1D (faster) helper be moved directly into mdw_opt? */
    auto channel_offsets = []( memory_desc_wrapper_opt const& data_opt,
            size_t * const data_off, dim_t const mb, dim_t const clo, dim_t const chi,
            dim_t const d, dim_t const h, dim_t const w) {
        assert(!data_opt.is_zero());
        typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
        auto const dm = data_opt.ndims();
        auto cf = (dm >= 5)? Coords::mk(mb,mb+1, clo,chi, d,d+1, h,h+1, w,w+1)
            : (dm >= 4)? Coords::mk(mb,mb+1, clo,chi, h,h+1, w,w+1)
            : (dm >= 3)? Coords::mk(mb,mb+1, clo,chi, w,w+1)
            : Coords::mk(mb,mb+1, clo,chi); // dm>=2 ?
        for ( ; cf; ++cf) { // channel coords in simd-length chunks
            data_opt.vec_off_v(
                    cf.base(), // VecPos& vector register data
                    (dim_t*)&data_off[cf.get_pos()], // outputs (seq)
                    cf.get_vl(), // register len, num ouptuts
                    false/*is_pos_padded*/);
        }
    };
#endif

    const dim_t MB = pd()->MB();
    dim_t const stack_channels = 32768; // stack usage threshold for channel offsets
    if (across_channels && C <= stack_channels ) {
        //auto ker_across_vec = [&src,&dst,&stride_mb,&C,&D,&H,&W,&half_size,&k,&alpha,&beta,&summands](
        auto ker_across_vec = [&](
                size_t * const dst_off,     // oc from 
                dim_t const mb,             // 0 .. C-1
                dim_t const od, dim_t const oh, dim_t const ow) {
            acc_data_t sum[C];
            FOR_CHAN sum[i]= 0;
            FOR_CHAN {
                DEFINE_HALFSIZE_RANGE(c_st, c_en, i, 0, C);
                for(dim_t c = c_st; c < c_en; ++c) {
                    const acc_data_t s = src[dst_off[c]];
                    sum[i] += s * s;
                }
            }
            FOR_CHAN sum[i] = k + alpha * sum[i] / summands;
            FOR_CHAN dst[dst_off[i]] = static_cast<data_t>( src[dst_off[i]]
                        * fast_negative_powf(sum[i], beta));
        };

        // size^{2 or 3}? XXX
        // and MB*D*H*W work amount sufficiently large for omp? XXX
        // vectorize across channels, using fast offsets calculated on stack.
        parallel_nd(MB, D, H, W, [&](dim_t mb, dim_t d, dim_t h, dim_t w) {
                size_t data_off[C];
#if 0 // only slightly better vectorization (recheck)
                if (tag == nchw ) FOR_CHAN 
                    data_off[i] = mb * stride_mb + i * H * W + h * W + w;
                else if (tag == nhwc ) FOR_CHAN
                    data_off[i] = mb * stride_mb + h * W * C + w * C + i;
                else
#endif
                if (formula || C <= size ) { // maybe size^2 or size^3 ?
                    for(unsigned c=0U; c<C; ++c) data_off[c] = offset<tag>(
                            data_d, mb,stride_mb, c,C, d,D, h,H, w,W );
                } else { // function call phys offset needs a little help to vectorize
                    channel_offsets(data_opt, data_off, mb, 0, C, d, h, w);
                }
                ker_across_vec(&data_off[0], mb, /*c,*/ d, h, w);
            });
    } else if (across_channels) {
        // actually this will handle any number of channels,
        // as well as trivial ndims=2 case
        /** if channels large, break apart and overlap the offset calcs */
        auto ker_across_vec_lapped = [&](
                dim_t const clo, dim_t const chi, // 'central' channels range
                size_t * const dst_off, // now from max(0,clo-half_size) to min(chi+half_size+1,C)
                // but &dst_off[0] corresponds to 'clo'  (small -ve offsets possible)
                dim_t const mb, // internally c=0..C-1
                dim_t const od, dim_t const oh, dim_t const ow) {
            dim_t const cspan = chi - clo;
            dim_t const clolo = nstl::max(clo - half_size + 0, (dim_t)0); // corresp. dst_off[0]
            acc_data_t sum[cspan];
            for(dim_t c=0; c<cspan; ++c) sum[c]= 0;
            for(dim_t c=clo; c<chi; ++c) { // c ~ central channel
                DEFINE_HALFSIZE_RANGE(c_st, c_en, c, 0, C);
                for(dim_t k = c_st; k < c_en; ++k) { // k ~ lrn window
                    const acc_data_t s = src[dst_off[k-clolo]]; // lrn window datum
                    sum[c-clo] += s * s; // accum central sum
                }
            }
            for(int c=0; c<cspan; ++c) sum[c] = k + alpha * sum[c] / summands;
            // offset data for 'central' region, fwd by up to half_size
            size_t * central_off = dst_off + (clo - clolo);
            for(int c=0; c<cspan; ++c)
                dst[central_off[c]] = static_cast<data_t>(
                        src[central_off[c]] * fast_negative_powf(sum[c], beta));
        };

        // Large channels: split over threads, and overlap offset calcs,
        // because lrn window can extend half_size past the central range. */
        dim_t const blksz = stack_friendly_blksz(C);
        parallel_nd(MB, utils::div_up(C, blksz), D, H, W,
                [&](dim_t mb, dim_t c_blk, dim_t d, dim_t h, dim_t w) {
            dim_t clo = c_blk * blksz;
            dim_t chi = nstl::min(clo + blksz, C);
            // lrn kernel extends up to half_size past [clo,chi)
            dim_t clolo = nstl::max(clo - half_size, dim_t{0});
            dim_t chihi = nstl::min(chi + half_size + 1, C);
            dim_t offset_span = chihi - clolo;
            size_t data_off[offset_span];
            if(formula) {
                for(unsigned c=clolo; c<chihi; ++c){
                    data_off[c-clolo] = offset<tag>(data_d, mb,stride_mb,
                            c,C, d,D, h,H, w,W );
                }
            }else{ // vec_off_v phys offset calc in simd-length chunks
                channel_offsets(data_opt, data_off, mb, clolo, chihi, d, h, w);
            }
            ker_across_vec_lapped( clo, chi, &data_off[0], mb, /*c,*/ d, h, w);
            });
#if 0 // very old...
        } else if (across_channels) {
            // ker single channel (original way, ok if D*H*W is big enough?)
            // (one part is calculating the channel-wise "central" offsets)
            parallel_nd(MB, C, D, H, W,
                    [&](dim_t mb, dim_t c, dim_t d, dim_t h, dim_t w) {
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, d,D, h,H, w,W);
                    ker_within(off, mb, c, d, h, w);
                    });
#endif
    } else if(ndims==2){
        // XXX test this case! perhaps can be much simpler
        assert( !across_channels );
        // degenerate case: lrn window of size 1 is all we can use.
        printf(" warning: TBD ndims==2 fwd lrn within UNTESTED\n");
        dim_t const blksz = stack_friendly_blksz(C);
        parallel_nd(MB, utils::div_up(C, blksz), D, H, W,
                [&](dim_t mb, dim_t c_blk, dim_t d, dim_t h, dim_t w)
                {
                dim_t const clo = c_blk * blksz;
                dim_t const chi = (clo + blksz >= C? C: clo + blksz);
                size_t cent[chi-clo]; // cent offsets as vector
                channel_offsets( data_opt, cent, mb, clo,chi, d, h, w );
                for(dim_t c=clo; c<chi; ++c) {
                    acc_data_t const central = src[cent[c-clo]];
                    auto const sum = k + alpha * central * central / summands;
                    dst[cent[c-clo]] = static_cast<data_t>(
                            central * fast_negative_powf(sum, beta));
                }
                });
    } else {
        assert( !across_channels );
        assert( ndims >= 3 );
        auto ker_within = [&](dim_t const central_off,
                dim_t const mb, dim_t const oc,
                dim_t const od, dim_t const oh, dim_t const ow) {
            acc_data_t sum = 0;
            // --mode=C --lrn --tag=ncdhw --dir=FWD_D --alg=ACROSS,WITHIN ic202id10 --tag=nchw ic202ih10
            //      2.366 166 0.231 3.41 ms
            //                      3.36
            // perf: 2.39 174 0.266 3.46
            // perf: 2.39 172 0.266 3.66 expand formula cases here
            //      2.43 167 0.266 3.38 ms
            //           133 with ker_within_vec_generic
            // generic fwd lrn_within_channel
            assert(ndims >= 3);
            assert(ndims <= 5);
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            if (formula) {
                // formula ==> DENSE layouts and formula-driven vectorize well
                if (tag==nchw || tag==nhwc || tag==nChw8c || tag==nChw16c) {
                    // 4D formulas
                    for_(dim_t h = h_st; h < h_en; ++h)
                    for (dim_t w = w_st; w < w_en; ++w)
                    {
                        acc_data_t s=0;
                        if (tag == nchw )
                            s = src[mb * stride_mb + oc * H * W + h * W + w];
                        else if (tag == nhwc )
                            s = src[mb * stride_mb + h * W * C + w * C + oc];
                        else if(tag == nChw8c ) {
                            constexpr int blksize = 8;
                            s = src[mb * stride_mb + (oc / blksize) * H * W * blksize
                                + h * W * blksize + w * blksize + oc % blksize];
                        } else /*if(tag == nChw16c)*/ {
                            constexpr int blksize = 16;
                            s = src[mb * stride_mb + (oc / blksize) * H * W * blksize
                                + h * W * blksize + w * blksize + oc % blksize];
                        }
                        sum += s * s;
                    }
                } else { // only for 'formula=true' testing
                    for_(dim_t d = d_st; d < d_en; ++d)
                    for_(dim_t h = h_st; h < h_en; ++h)
                    for (dim_t w = w_st; w < w_en; ++w)
                    {
                        acc_data_t const s = src[offset<tag>(
                                data_d, mb,stride_mb, oc,C, d,D, h,H, w,W)];
                        sum += s * s;
                    }
                }
            } else { // ncdhw: 1866 --> 182 ms (~ 9x faster, using vec_off_v)
                //using dnnl::impl::CoordRegs<uint64_t,6>; // match memory_desc_wrapper_opt::VecPos
                typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
                auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, oc,oc+1, d_st,d_en, h_st,h_en, w_st,w_en)
                : (ndims >= 4)? Coords::mk(mb,mb+1, oc,oc+1, h_st,h_en, w_st,w_en)
                : Coords::mk(mb,mb+1, oc,oc+1, w_st,w_en); // ndims>=3
                NOVEC for ( ; cf; ++cf) {
                    dim_t lrnp[MVL];
                    const unsigned vl=cf.get_vl();
                    data_opt.vec_off_v( cf.base(), &lrnp[0], vl, false/*is_pos_padded*/ );
                    for(unsigned dhw=0U; dhw<vl; ++dhw) {
                        sum += SQUARE(acc_data_t{ src[lrnp[dhw]] });
                    }
                }
            }
            data_t central = src[central_off];
            sum = k + alpha * sum / summands;
            dst[central_off] = static_cast<data_t>(central * fast_negative_powf(sum, beta));
        };
        auto ker_within_vec_generic = [&](size_t const* center, 
                dim_t const mb, dim_t const od, dim_t const oh, dim_t const ow
                )
        {
            static_assert( sizeof(dim_t) == sizeof(size_t), "type issue" );
#if 0
            // the obvious way to use the "Coords" iterator
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            for(dim_t oc=0; oc<C; ++oc) {
                acc_data_t sum = 0;
                typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
                auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, oc,oc+1, d_st,d_en, h_st,h_en, w_st,w_en)
                    : (ndims >= 4)? Coords::mk(mb,mb+1, oc,oc+1, h_st,h_en, w_st,w_en)
                    : Coords::mk(mb,mb+1, oc,oc+1, w_st,w_en); // ndims>=3
                NOVEC for ( ; cf; ++cf) {
                    const unsigned vl=cf.get_vl();
                    dim_t lrnp[MVL]; // get lrn window phys coords
                    data_opt.vec_off_v(cf.base(), (dim_t *)&lrnp[0], vl);
                    ShortLoop() for(unsigned dhw=0U; dhw<vl; ++dhw) {
                        sum += SQUARE(acc_data_t{ src[lrnp[dhw]] });
                    }
                }
                sum = k + alpha * sum / summands;
                data_t const central = src[center[oc]];
                dst[center[oc]] = static_cast<data_t>(central * fast_negative_powf(sum, beta));
            }
#else
            // --lrn --dir=FWD_D --alg=ACROSS,WITHIN --tag=ncdhw ic202id10 --tag=nchw ic202ih10
            // perf : above 133 ms, this loop reorder 24.9 ms
            acc_data_t sum[C];
            FOR_CHAN sum[i] = 0;
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
            // somewhat slow, so change loop order
            auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, 0,1, d_st,d_en, h_st,h_en, w_st,w_en)
                : (ndims >= 4)? Coords::mk(mb,mb+1, 0,1, h_st,h_en, w_st,w_en)
                : Coords::mk(mb,mb+1, 0,1, w_st,w_en); // ndims>=3
            // something is wrong here...
            NOVEC for ( ; cf; ++cf) {
                const unsigned vl=cf.get_vl(); // vl ~ d,h,w coords
                for(dim_t oc=0; oc<C; ++oc)
                {
                    ShortLoop() for(unsigned i=0U; i<vl; ++i)
                        cf.vp[1][i] = oc; // manual adjustment
                    dim_t lrnp[MVL];
                    data_opt.vec_off_v(cf.base(), (dim_t *)&lrnp[0], vl);
                    for(unsigned i=0U; i<vl; ++i) {
                        sum[oc] += SQUARE(acc_data_t{ src[lrnp[i]] });
                    }
                }
                ShortLoop() for(unsigned i=0U; i<vl; ++i)
                    cf.vp[1][i] = 0; // restore orig channel (0)
            }
            for(dim_t oc=0; oc<C; ++oc) {
                sum[oc] = k + alpha * sum[oc] / summands;
                data_t const central = src[center[oc]];
                dst[center[oc]] = static_cast<data_t>(central
                        * fast_negative_powf(sum[oc], beta));
            }
#endif
        };
        auto ker_within_vec_generic2= [&](dim_t const mb,
                dim_t const clo, dim_t const chi,
                dim_t const od, dim_t const oh, dim_t const ow
                )
        {
            static_assert( sizeof(dim_t) == sizeof(size_t), "type issue" );
#if 0 // 134 ms
            // the obvious way to use the "Coords" iterator
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            size_t center[chi-clo];
            channel_offsets( data_opt, &center[0], mb, clo, chi, od, oh, ow );
            for(dim_t oc=clo; oc<chi; ++oc) {
                acc_data_t sum = 0;
                typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
                auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, oc,oc+1, d_st,d_en, h_st,h_en, w_st,w_en)
                    : (ndims >= 4)? Coords::mk(mb,mb+1, oc,oc+1, h_st,h_en, w_st,w_en)
                    : Coords::mk(mb,mb+1, oc,oc+1, w_st,w_en); // ndims>=3
                // constructor and iter *many* times :(
                NOVEC for ( ; cf; ++cf) {
                    const unsigned vl=cf.get_vl();
                    dim_t lrnp[MVL]; // get lrn window phys coords
                    data_opt.vec_off_v(cf.base(), (dim_t *)&lrnp[0], vl);
                    ShortLoop() for(unsigned dhw=0U; dhw<vl; ++dhw) {
                        sum += SQUARE(acc_data_t{ src[lrnp[dhw]] });
                    }
                }
                sum = k + alpha * sum / summands;
                data_t const central = src[center[oc-clo]];
                dst[center[oc-clo]] = static_cast<data_t>(central * fast_negative_powf(sum, beta));
            }
#else // 24.5 ms  26.4 ms
            acc_data_t sum[chi-clo];
            for(dim_t oc=clo; oc<chi; ++oc) sum[oc-clo] = 0;
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
            auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, 0,1, d_st,d_en, h_st,h_en, w_st,w_en)
                : (ndims >= 4)? Coords::mk(mb,mb+1, 0,1, h_st,h_en, w_st,w_en)
                : Coords::mk(mb,mb+1, 0,1, w_st,w_en); // ndims>=3
            NOVEC for ( ; cf; ++cf) {
                const unsigned vl=cf.get_vl(); // vl ~ d,h,w coords
                for(dim_t oc=clo; oc<chi; ++oc)
                {
                    ShortLoop() for(unsigned i=0U; i<vl; ++i)
                        cf.vp[1][i] = oc; // manual adjustment
                    dim_t lrnp[MVL];
                    data_opt.vec_off_v(cf.base(), (dim_t *)&lrnp[0], vl);
                    for(unsigned i=0U; i<vl; ++i) {
                        sum[oc-clo] += SQUARE(acc_data_t{ src[lrnp[i]] });
                    }
                }
                ShortLoop() for(unsigned i=0U; i<vl; ++i)
                    cf.vp[1][i] = 0; // restore orig cf channel (0)
            }
            size_t center[chi-clo];
            channel_offsets( data_opt, center, mb, clo, chi, od, oh, ow );
            for(dim_t oc=clo; oc<chi; ++oc) {
                auto const sum_oc = k + alpha * sum[oc-clo] / summands;
                data_t const central = src[center[oc-clo]];
                dst[center[oc-clo]] = static_cast<data_t>(central
                        * fast_negative_powf(sum_oc, beta));
            }
#endif
        };
#if 1
        // The increased cf iter, and indirect summation target makes this
        // SLOWER:  25 ms --> 80 ms.  In principle, the vector length MIGHT
        // be bigger, though.
        //  with stack_channels=32768 and ic32777...
        auto ker_within_vec_generic3= [&](
                data_t const* const src, data_t * const dst,
                memory_desc_wrapper_opt const& data_opt,
                dim_t const mb, dim_t const clo, dim_t const chi,
                dim_t const od, dim_t const oh, dim_t const ow
                )
        {
            acc_data_t sum[chi-clo];
            for(dim_t oc=clo; oc<chi; ++oc) sum[oc-clo] = 0;
            DEFINE_HALFSIZE_RANGE(d_st, d_en, od, 0, D);
            DEFINE_HALFSIZE_RANGE(h_st, h_en, oh, 0, H);
            DEFINE_HALFSIZE_RANGE(w_st, w_en, ow, 0, W);
            typedef CoordsForNd<6,uint64_t,uint64_t> Coords;
            auto cf= (ndims >= 5)? Coords::mk(mb,mb+1, clo,chi, d_st,d_en, h_st,h_en, w_st,w_en)
                : (ndims >= 4)? Coords::mk(mb,mb+1, clo,chi, h_st,h_en, w_st,w_en)
                : Coords::mk(mb,mb+1, clo,chi, w_st,w_en); // ndims>=3
            NOVEC for ( ; cf; ++cf) {
                const unsigned vl=cf.get_vl(); // vl ~ d,h,w coords
                //for(dim_t oc=clo; oc<chi; ++oc)
                // ~ dim_t oc = cf.vp[1][0..vl-1];
                {
                    dim_t lrnp[MVL];
                    data_opt.vec_off_v(cf.base(), (dim_t *)&lrnp[0], vl);
                    for(unsigned i=0U; i<vl; ++i) {
                        sum[cf.vp[1][i]-clo] += SQUARE(acc_data_t{ src[lrnp[i]] });
                    }
                }
            }
            size_t center[chi-clo];
            channel_offsets( data_opt, center, mb, clo, chi, od, oh, ow );
            for(dim_t oc=clo; oc<chi; ++oc) {
                auto const sum_oc = k + alpha * sum[oc-clo] / summands;
                data_t const central = src[center[oc-clo]];
                dst[center[oc-clo]] = static_cast<data_t>(central
                        * fast_negative_powf(sum_oc, beta));
            }
        };
#endif

        assert( !across_channels );
        assert( ndims >= 3 );

        // fall back to "old-style" (vectorize across lrn window, ~5)
        // XXX need to work on a fast version of channel_offsets for 'within'
        // case too.  Too bad offsets can't easily be re-used unless d,h,w
        // get tiled, but that is hard.  I guess some fairly large d,h,w
        // tiling could be used (just recalc around tile edges).
        if (tag == nChw16c || tag == nChw8c) {
            // This blocking MIGHT buy a little bit of locality, I guess
            parallel_nd(MB, utils::div_up(C, blksize), H, W,
                    [&](dim_t mb, dim_t c_blk, dim_t h, dim_t w) {
                    dim_t const c = c_blk * blksize;
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, 0,1, h,H, w,W);
                    PRAGMA_OMP_SIMD()
                    dim_t const cc_en = (blksize <= C - c? blksize: C -c);
                    for (dim_t cc = 0; cc < cc_en; ++cc)
                        ker_within(off+cc, mb, c + cc, 0, h, w);
                    });
        }
        else if (tag == nchw || tag == nhwc) {
            parallel_nd(MB, C, H, W, [&](dim_t mb, dim_t c, dim_t h, dim_t w) {
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, 0,1, h,H, w,W);
                    ker_within(off, mb, c, 0, h, w);
                    });
        }
#if 0
        // lrn fwd_d ACROSS,WITHIN --tag=ncdhw ic802id10 --tag=nchw ic802ih10
        // 7.09 **96.3** 0.723 13.0 ms
        else if(!formula && C > size && C < 32768 ){ // needless restrictions
            // orig version
            assert( ndims >=3 && ndims <= 5 );
            parallel_nd(MB, D, H, W,
                    [&](dim_t mb, dim_t d, dim_t h, dim_t w) {
                    size_t off[C]; // central offsets vector
                    channel_offsets( data_opt, off, mb, 0, C, d, h, w );
                    ker_within_vec_generic(off, mb, d, h, w);
                    });
        }
#elif 0
        // same speeds
        else if(!formula && C > size && C < 32768 ){ // needless restrictions
            // orig version
            assert( ndims >=3 && ndims <= 5 );
            parallel_nd(MB, D, H, W,
                    [&](dim_t mb, dim_t d, dim_t h, dim_t w) {
                    ker_within_vec_generic2(mb, 0,C, d, h, w);
                    });
        }
#endif
#if 1
        else if( !formula && C > size){
            // Here we address func call offsets, any # channels
            // lrn fwd_d ACROSS,WITHIN --tag=ncdhw ic32777id10 --tag=nchw ic32777ih10
            // 300 **3799** 32 529 ms
            // no change, C=802
            dim_t const blksz = stack_friendly_blksz(C);
            parallel_nd(MB, utils::div_up(C, blksz), D, H, W,
                    [&](dim_t mb, dim_t c_blk, dim_t d, dim_t h, dim_t w) {
                    dim_t clo = c_blk * blksz;
                    dim_t chi = (clo + blksz >= C? C: clo + blksz);
                    //printf(" clo,chi=%ld,%ld\n", clo, chi);
                    ker_within_vec_generic2(mb, clo,chi, d, h, w);
                    });
        }
#elif 0
        else if( !formula && C > size){
            // alt loops (more iter, indirect addr for dst :(
            //
            // 3x slower than generic2 optimization
            // **12617** ms QUITE BAD (c=32777)
            // **330** mw, C=802
            dim_t const blksz = stack_friendly_blksz(C);
            parallel_nd(MB, utils::div_up(C, blksz), D, H, W,
                    [&](dim_t mb, dim_t c_blk, dim_t d, dim_t h, dim_t w) {
                    dim_t clo = c_blk * blksz;
                    dim_t chi = (clo + blksz >= C? C: clo + blksz);
                    ker_within_vec_generic3(src, dst, data_opt,
                            mb, clo,chi, d, h, w);
                    });
        }
#endif
        else{ // original way
            // **655** ms, C=802
            // ker single channel (original way, ok if D*H*W is big enough?)
            // (one part is calculating the channel-wise "central" offsets)
            parallel_nd(MB, C, D, H, W,
                    [&](dim_t mb, dim_t c, dim_t d, dim_t h, dim_t w) {
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, d,D, h,H, w,W);
                    ker_within(off, mb, c, d, h, w);
                    });
        }
    }
}

// Backward LRN formula (refer to Forward LRN formula):
// Partial derivatives:
// dy_i/dx_j =         - 2*a*b/n * x_i * O(i)^-b / O(i) * x_j, i != j
//             O(i)^-b - 2*a*b/n * x_i * O(i)^-b / O(i) * x_j, i == j, where
// O(i) = (k + a / n * Sum:j [x_j^2]), j in [i - n/2, i + n/2]. Note: j depends
//     on i, which means that O(i) may use more points than local_size.
// Now, z_i = Sum:k [dE/dy_k * dy_k/dx_j], where k in [i - n/2, i + n/2]
//     for ACROSS. 2d-shape for WITHIN.
// Then, dE/dy_k = diffDst_k. Finally,
// z_i = Sum:k [dd_k * dy_k/dx_j] = A - B (code variables) =
//     = dd_i * O(i)^-b - 2*a*b/n * x_i * Sum:k {O(k)^-b / O(k) * x_k * dd_k};

template <impl::data_type_t d_type>
template <dnnl_format_tag_t tag>
void ref_lrn_bwd_t<d_type>::execute_backward(const exec_ctx_t &ctx) const {
    using namespace alg_kind;
    using namespace format_tag;

    auto src = CTX_IN_MEM(const data_t *, DNNL_ARG_SRC);
    auto diff_dst = CTX_IN_MEM(const data_t *, DNNL_ARG_DIFF_DST);
    auto diff_src = CTX_OUT_MEM(data_t *, DNNL_ARG_DIFF_SRC);

    //bool const formula = true;
    bool const formula = false;
    //bool const formula = (tag == nchw || tag == nhwc || tag == nChw8c || tag == nChw16c);
    // XXX just always construct the optimized one (slightly more work)
    const memory_desc_wrapper_opt data_opt(pd()->src_md());
    const memory_desc_wrapper& data_d = data_opt;

    const dim_t C = pd()->C();
    const dim_t D = pd()->D();
    const dim_t H = pd()->H();
    const dim_t W = pd()->W();
    const auto stride_mb = data_d.blocking_desc().strides[0];
    const bool across_channels = pd()->desc()->alg_kind == lrn_across_channels;
    static constexpr dim_t blksize = tag == nChw16c ? 16 : 8;
    const auto ndims = data_d.ndims();

    auto compute_n_summands = [&](dim_t size) {
        if (across_channels) {
            return size;
        } else { // within_channel
            dim_t n_summands = 1;
            for (auto d = ndims - 2; d > 0; --d)
                n_summands *= size;
            return n_summands;
        }
    };

    const acc_data_t alpha = static_cast<acc_data_t>(pd()->desc()->lrn_alpha);
    const acc_data_t beta = static_cast<acc_data_t>(pd()->desc()->lrn_beta);
    const acc_data_t k = static_cast<acc_data_t>(pd()->desc()->lrn_k);
    const dim_t size = pd()->desc()->local_size;
    const dim_t half_size = (size - 1) / 2;
    const dim_t summands = compute_n_summands(size);

    // REMOVED for VE: pass by value due to icc170 and icc180 problem on KNL
    auto get_omega = [&](dim_t const mb, dim_t const oc, dim_t const od,
            dim_t const oh, dim_t const ow) {
        acc_data_t sum = 0;
        if (across_channels) {
            const dim_t c_st = nstl::max(oc - half_size + 0, (dim_t)0);
            const dim_t c_en = nstl::min(oc + half_size + 1, C);

            for (dim_t c = c_st; c < c_en; ++c) {
                const acc_data_t s = src[offset<tag>(data_d, mb,stride_mb,
                        c,C, od,D, oh,H, ow,W)];
                sum += s * s;
            }
        } else {
            dim_t d_st = nstl::max(od - half_size + 0, (dim_t)0);
            dim_t d_en = nstl::min(od + half_size + 1, D);
            dim_t h_st = nstl::max(oh - half_size + 0, (dim_t)0);
            dim_t h_en = nstl::min(oh + half_size + 1, H);
            dim_t w_st = nstl::max(ow - half_size + 0, (dim_t)0);
            dim_t w_en = nstl::min(ow + half_size + 1, W);
            for_(dim_t d = d_st; d < d_en; ++d)
            for_(dim_t h = h_st; h < h_en; ++h)
            for (dim_t w = w_st; w < w_en; ++w) {
                const acc_data_t s = src[offset<tag>(
                        data_d, mb,stride_mb, oc,C, d,D, h,H, w,W)];
                sum += s * s;
            }
        }
        return (acc_data_t)(k + alpha * sum / summands);
    };
#if 0
    // get_omega could be scratchpad data from FWD_D pass? XXX
    auto get_omega_across_vec = [&](
            size_t * const dst_off /*[0..C-1]*/,
            // internal : dim_t const oc,
            dim_t const od, dim_t const oh, dim_t const ow) {
        acc_data_t sum[C] = 0;
        FOR_CHAN sum[i] = acc_data_t{0};
        FOR_CHAN {
            const dim_t c_st = nstl::max(oc - half_size + 0, (dim_t)0);
            const dim_t c_en = nstl::min(oc + half_size + 1, C);

            for (dim_t c = c_st; c < c_en; ++c) {
                const acc_data_t s = src[dst_off[c]];
                sum += s * s;
            }
        }
        return (acc_data_t)(k + alpha * sum / summands);
    };
    auto ker_across_vec = [&](
            size_t * const dst_off,     // oc from 
            dim_t const mb,             // 0 .. C-1
            dim_t const od, dim_t const oh, dim_t const ow) {
        for(dim_t oc=0; oc<C; ++oc){
            acc_data_t A = 0, B = 0;
            data_t central = src[dst_off[oc]];
            if(1) {
                const dim_t c_st = nstl::max(oc - half_size + 0, (dim_t)0);
                const dim_t c_en = nstl::min(oc + half_size + 1, C);

                for (dim_t c = c_st; c < c_en; c++) {
                    const auto off = dst_offoffset<tag>(data_d, mb,stride_mb,
                            c,C, od,D, oh,H, ow,W);
                    const acc_data_t omega = get_omega(mb, c, od, oh, ow);
                    const acc_data_t omega_in_beta
                        = fast_negative_powf(omega, beta);
                    const acc_data_t tmp
                        = omega_in_beta * (acc_data_t)diff_dst[off];
                    if (c == oc) A = tmp;
                    B += (src[off] * tmp / omega);
                }
            }
            B *= (2.0f * alpha * beta * central / summands);
            *d = static_cast<data_t>(A - B);
    };
#endif


    auto ker = [&](data_t * const d, dim_t const mb, dim_t const oc,
            dim_t const od, dim_t const oh, dim_t const ow) {
        acc_data_t A = 0, B = 0;
        data_t central = src[offset<tag>(data_d, mb,stride_mb, oc,C, od,D, oh,H, ow,W)];
        if (across_channels) {
            const dim_t c_st = nstl::max(oc - half_size + 0, (dim_t)0);
            const dim_t c_en = nstl::min(oc + half_size + 1, C);

            for (dim_t c = c_st; c < c_en; c++) {
                const auto off = offset<tag>(data_d, mb,stride_mb,
                        c,C, od,D, oh,H, ow,W);
                const acc_data_t omega = get_omega(mb, c, od, oh, ow);
                const acc_data_t omega_in_beta
                        = fast_negative_powf(omega, beta);
                const acc_data_t tmp
                        = omega_in_beta * (acc_data_t)diff_dst[off];
                if (c == oc) A = tmp;
                B += (src[off] * tmp / omega);
            }
        } else {
            dim_t d_st = nstl::max(od - half_size + 0, (dim_t)0);
            dim_t d_en = nstl::min(od + half_size + 1, D);
            dim_t h_st = nstl::max(oh - half_size + 0, (dim_t)0);
            dim_t h_en = nstl::min(oh + half_size + 1, H);
            dim_t w_st = nstl::max(ow - half_size + 0, (dim_t)0);
            dim_t w_en = nstl::min(ow + half_size + 1, W);
            for_(dim_t d = d_st; d < d_en; ++d)
            for_(dim_t h = h_st; h < h_en; ++h)
            for (dim_t w = w_st; w < w_en; ++w) {
                const auto off = offset<tag>(data_d, mb,stride_mb,
                        oc,C, d,D, h,H, w,W);
                const acc_data_t omega = get_omega(mb, oc, d, h, w);
                const acc_data_t omega_in_beta
                        = fast_negative_powf(omega, beta);
                const acc_data_t tmp
                        = omega_in_beta * (acc_data_t)diff_dst[off];
                if (d == od && h == oh && w == ow) A = tmp;
                B += (src[off] * tmp / omega);
            }
        }
        B *= (2.0f * alpha * beta * central / summands);
        *d = static_cast<data_t>(A - B);
    };

    const dim_t MB = pd()->MB();
#if 1
    if(0) {
    }
#else
    dim_t const stack_channels = 32768;
    // new methods =========================================================
    if (across_channels && C >= size && C <= stack_channels ) { // size^{2 or 3}? XXX
        // vectorize across channels, using fast offsets calculated on stack.
        parallel_nd(MB, D, H, W, [&](dim_t mb, dim_t d, dim_t h, dim_t w) {
                size_t data_off[C];
                if (formula) {
                    for(unsigned c=0U; c<C; ++c) data_off[c] = offset<tag>(
                            data_d, mb,stride_mb, c,C, d,D, h,H, w,W );
                } else { // function call phys offset needs a little help to vectorize
                    channel_offsets(data_opt, data_off, mb, 0, C, d, h, w);
                }
                ker_across_vec(&data_off[0], mb, /*c,*/ d, h, w);
            });
    }
#endif
    // old methods =========================================================
    else if (tag == nChw16c || tag == nChw8c) {
        parallel_nd(MB, utils::div_up(C, blksize), H, W,
                [&](dim_t mb, dim_t c_blk, dim_t h, dim_t w) {
                    dim_t c = c_blk * blksize;
                    //const dim_t off = mb * stride_mb + c * H * W
                    //        + (h * W + w) * blksize;
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, 0,1, h,H, w,W);
                    PRAGMA_OMP_SIMD()
                    for (dim_t cc = 0; cc < nstl::min(blksize, C - c); ++cc)
                        ker(&diff_src[off + cc], mb, c + cc, 0, h, w);
                });
    } else if (tag == nhwc || tag == nchw) {
        parallel_nd(MB, H, W, C, [&](dim_t mb, dim_t h, dim_t w, dim_t c) {
            const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, 0,1, h,H, w,W);
            ker(&diff_src[off], mb, c, 0, h, w);
        });
    } else {
        parallel_nd(MB, C, D, H, W,
                [&](dim_t mb, dim_t c, dim_t d, dim_t h, dim_t w) {
                    const dim_t off = offset<tag>(data_d, mb,stride_mb, c,C, d,D, h,H, w,W);
                    ker(&diff_src[off], mb, c, d, h, w);
                });
    }
}

template void
ref_lrn_fwd_t<data_type::f32>::execute_forward<format_tag::nChw16c>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_fwd_t<data_type::f32>::execute_forward<format_tag::nChw8c>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::f32>::execute_forward<format_tag::nchw>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::f32>::execute_forward<format_tag::nhwc>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::f32>::execute_forward<format_tag::any>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::f32>::execute_backward<format_tag::nChw16c>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::f32>::execute_backward<format_tag::nChw8c>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_bwd_t<data_type::f32>::execute_backward<format_tag::nchw>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_bwd_t<data_type::f32>::execute_backward<format_tag::nhwc>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_bwd_t<data_type::f32>::execute_backward<format_tag::any>(
        const exec_ctx_t &ctx) const;

template void
ref_lrn_fwd_t<data_type::bf16>::execute_forward<format_tag::nChw16c>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_fwd_t<data_type::bf16>::execute_forward<format_tag::nChw8c>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::bf16>::execute_forward<format_tag::nchw>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::bf16>::execute_forward<format_tag::nhwc>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_fwd_t<data_type::bf16>::execute_forward<format_tag::any>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::bf16>::execute_backward<format_tag::nChw16c>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::bf16>::execute_backward<format_tag::nChw8c>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::bf16>::execute_backward<format_tag::nchw>(
        const exec_ctx_t &ctx) const;
template void
ref_lrn_bwd_t<data_type::bf16>::execute_backward<format_tag::nhwc>(
        const exec_ctx_t &ctx) const;
template void ref_lrn_bwd_t<data_type::bf16>::execute_backward<format_tag::any>(
        const exec_ctx_t &ctx) const;

} // namespace cpu
} // namespace impl
} // namespace dnnl

// vim: et ts=4 sw=4 cindent cino=+s,l0,\:4,N-s
